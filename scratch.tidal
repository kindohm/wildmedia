d1
  $ (|* cps "[0.666 1 0.75 1.2]/150")
  $ whenmod 40 10 (|* cps (slow "<10 5>/6" $ "<4 2 3 2 1>"))
  $ stack [
    plyWith 2 (# midichan 3) $ s "syntakt" # note "c5" # amp 0.8
    , s "harmor" # note "c5" # amp 0.8
  ] # cps 8

  hush


-- system 2983473

do
  let pat1 = "{1@6 1@3 0@2 1 1 1 1 1 1 1 0 0 0 0}%16"
  let pat2 = "{1@3 1@3 1@3 0@6 1 1 0 0 0}%16"
  let part1 = someCyclesBy 0 (iter 8)
                $ (1 ~>)
                $ someCyclesBy 0.5 rev
                $ stack [
                  struct pat1 $ midichan 0 # amp 1 # note "c5" # s "harmor"
                  , struct (inv pat1) $ midichan 1 # amp 1 # note "c5" # s "harmor"
                  , struct pat1 $ midichan 0 # amp 1 # note "c5" # s "syntakt"
                  , struct (inv pat1) $ midichan 1 # amp 1 # note "c5" # s "syntakt"
                  , mask "{1 0 0 0}%16" $ struct pat1 $ midichan 9 # note "c6" # s "syntakt" # amp 1
                  , sometimes (off "1s" id) $ ("1s" ~>) $ struct pat1 $ midichan 6 # note "c5" # amp 1 # s "syntakt"
                ]
  let part2 = iter 1 $ slow 1 $ stack [
                  struct pat2 $ midichan 2 # amp 1 # note "c5" # s "harmor"
                  , struct (inv pat2) $ midichan 3 # amp 1 # note "c5" # s "harmor"
                  , struct pat2 $ midichan 0 # amp 1 # note "c5" # s "syntakt"
                  , struct (inv pat2) $ midichan 1 # amp 1 # note "c5" # s "syntakt"
                  , mask "{1 0 0 0}%16" $ struct pat1 $ midichan 9 # note "c6" # s "syntakt" # amp 1
                  , sometimes (off "1s" id) $ ("1s" ~>) $ struct pat1 $ midichan 6 # note "c5" # amp 1 # s "syntakt"
                ]
  d1
    $ stack [
      iter 8 $ someCyclesBy 0.5 (const part2) $ (1 ~>) $ part1
    ]
  
  once
    $ stack [
      ccv (range 0 127 $ segment 1 $ (1 ~>) $ rand) # ccn 1
      , ccv (range 0 127 $ segment 1 $ (2 ~>) $ rand) # ccn 2
      , ccv (range 0 127 $ segment 1 $ (3 ~>) $ rand) # ccn 3
      , ccv (range 0 127 $ segment 1 $ (4 ~>) $ rand) # ccn 4
      , ccv (range 0 127 $ segment 1 $ (5 ~>) $ rand) # ccn 5
      , ccv (range 0 127 $ segment 1 $ (6 ~>) $ rand) # ccn 6
    ] # s "harmor" # midichan 0


  once $ s "harmor" # ccn 66# ccv 0 # midichan 15 # cps (segment 1 $ range 0.3 1 $ (38 ~>) $ rand)



    hush

d1
  $ fast 8
  $ s "harmor" # midichan 0 # ccn 6 # ccv 127



d1 
  -- $ jux ((|+ begin (range (0.2) (0.1) $ slow 11 tri)) . (iter 16))
  $ slow 8 
  $ s "omgbreaks*200"
  # n 10 
  # legato 40 
  # begin (range 0 1 $ saw) 
  # speed "[1]"
  # cps 0.8

  # delay (range 0.1 0.7 $ slow 13.333 tri)
  # delayt (range 0.05 0.95 $ slow 15.716 tri)
  # delayfb (range 0.1 0.9 $ slow 14.1 tri)
  # room 0.5
  # size 0.9
  # cps (range 0.5 0.8 $ slow 13.9 saw)
  # cutoff (range 1000 5000 $ slow 9.1 tri)

hush


do
  let seq1 = "<0.2 0.3 0.4 0.9 0.8 0.3 0.1>" 
      seq2 = "<0.5 0.2 0.8 0.7 0.6 0.7 1 0.8 0.4 0.3 0.5>"
      deg = 0
      kickseq = seq1
      kickdir = id
      kickdeg = 0
      kickmult = 4
      percseq = seq2
      percdir = id
      percdeg = 0
      percmult = "4"
  d1 
    $ degradeBy deg
    $ (1 ~>)
    $ stack [
         degradeBy kickdeg 
          $ kickdir $ degradeBy ("1" - kickseq) $ (1 ~>) 
          $ fast kickmult
          $ s "harmor" 
          # midichan 0 # note "c5" # amp seq1 
        , degradeBy percdeg 
          $ percdir  
          $ degradeBy ("1" - percseq) $ (2 ~>) 
          $ fast percmult
          $ s "harmor" 
          # midichan 4 # note "c5" # amp seq2
    ] # cps (170/120/2)

  hush